// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -----------------------------------------------------------------------------------
// Ai Providers and their Models 

model AiProvider {
  id         String      @id @default(uuid())
  name       String       // e.g. OpenAI, Replicate, Fal AI
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  aiModels   AiModel[]    // One-to-many relationship
}

model AiModel {
  id                String      @id @default(uuid())
  aiProviderId      String
  name              String        // Model name, e.g. DALLÂ·E, SDXL, etc.
  baseCostPerCall   Float         // Real USD API cost
  mstarsCostPerCall Float
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  aiProvider        AiProvider    @relation(fields: [aiProviderId], references: [id], onDelete: Restrict)
  aiFilters         AiFilter[]    // Many filters can use this model
  transactions      MstarTransaction[]
  packs Packs[]
}

// -----------------------------------------------------------------------------------
// User

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  mstarsBalance Float           @default(0)
  heldBalance Float @default(0)
  showAds Boolean @default(true)
  name          String?
  dateOfBirth   String? 
  gender        String?
  country       String?
  provider      Provider
  providerId    String?  // ID from Google/Facebook/Apple
  otp           String?  // For email-based login
  otpExpiresAt  DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  transactions      MstarTransaction[]
}

// -----------------------------------------------------------------------------------
// User Transactions

model MstarTransaction {
  id                String           @id @default(uuid())
  userId            String
  aiFilterId        String?          // Nullable
  aiModelId         String           // Track exact model used
  mstarsSpent       Float
  realCost          Float?        // USD cost if needed
  transactionType   TransactionType
  status            TransactionStatus @default(COMPLETED)
  createdAt         DateTime      @default(now())

  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  aiFilter          AiFilter?     @relation(fields: [aiFilterId], references: [id])
  aiModel           AiModel       @relation(fields: [aiModelId], references: [id])
}

// -----------------------------------------------------------------------------------
// User Models

model Model {
  id String @id @default(uuid())
  name String
  type ModelTypeEnum
  age Int
  ethnicity EthnicityEnum
  eyeColor EyeColorEnum
  bald Boolean
  userId String
  triggerWord String
  tensorPath String?
  trainingStatus ModelTrainingStatusEnum @default(PENDING)
  outputImages OutputImages[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  falAiRequestId String?
  zipUrl String
  @@index([falAiRequestId])
}

// -----------------------------------------------------------------------------------
// User Ai Generated Images

model OutputImages {
  id String @id @default(uuid())
  imageUrl String @default("")
  modelId String
  userId String
  prompt String
  falAiRequestId String
  status OutputImageStatusEnum @default(PENDING)
  model Model @relation(fields: [modelId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([falAiRequestId])
}

// -----------------------------------------------------------------------------------
// Ai Filters 

model AiFilter {
  id                String           @id @default(uuid())
  name              String
  aiModelId         String
  additionalCost    Int            @default(0) // Extra mstars if premium
  isFeatureHero Boolean @default(false)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  aiModel           AiModel        @relation(fields: [aiModelId], references: [id], onDelete: Restrict)
  transactions      MstarTransaction[]
  showcase  AiFilterShowCase?
}


// Ai Filters Showcase 

model AiFilterShowCase {
  id String @id @default(uuid())
  aiFilterId String @unique
  images      ShowcaseImagePair[]
  aiFilter AiFilter @relation(fields: [aiFilterId], references: [id])
}

model ShowcaseImagePair {
  id        String   @id @default(uuid())
  beforeImage String // URL or path to the "before" image
  afterImage  String // URL or path to the "after" image
  
  // This is the foreign key that links this image pair back to its showcase container.
  showcaseId  String
  showcase    AiFilterShowCase @relation(fields: [showcaseId], references: [id])
}

// -----------------------------------------------------------------------------------
// Ai Filters output images

model GeneratedImages {
  id String @id @default(uuid())
  aiFilterId String?
  packId String?
  userModelId String?
  prompt String?
  userId String
  imageUrl String @default("")
  providerRequestId String?
  status OutputImageStatusEnum @default(PENDING)
  attempt Int @default(1)
  failReason String?
  transactionId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// -----------------------------------------------------------------------------------
// Ai Images Defined Packs with Prompts

model Packs {
  id String @id @default(uuid())
  name String
  aiModelId String @default("849a89f6-00d1-45e5-bd16-ee3a8f32597a")
  prompts PackPrompts[]
  tumbnail String
  gallary String[]
  description String
  createdAt DateTime @default(now())
  updatedAt     DateTime @updatedAt
  packs AiModel @relation(fields: [aiModelId], references: [id])
}

// -----------------------------------------------------------------------------------
//  Packs Prompts

model PackPrompts {
  id String @id @default(uuid())
  prompt String
  packId String
  type String @default("unknown")
  pack Packs @relation(fields: [packId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}



// -----------------------------------------------------------------------------------
// Enums

enum Provider {
  GOOGLE
  FACEBOOK
  APPLE
  EMAIL
}

enum TransactionType {
  DEBIT
  CREDIT
  REFUND
}

enum TransactionStatus {
  PROCESSING
  COMPLETED
  FAILED
}

enum ModelTypeEnum {
  MAN
  WOMEN
  OTHER
}

enum ModelTrainingStatusEnum {
  PENDING
  GENERATED
  FAILED
}

enum EthnicityEnum {
    WHITE
    BLACK
    ASIAN_AMERICAN
    EAST_ASIAN
    SOUTH_EAST_ASIAN
    SOUTH_ASIAN
    MIDDLE_EASTERN
    PACIFIC
    HISPANIC
}

enum EyeColorEnum {
  BLACK
  BLUE
  GREY
  BROWN 
  HAZEL
}

enum OutputImageStatusEnum {
  PENDING
  UPLOADING
  GENERATED
  FAILED
}